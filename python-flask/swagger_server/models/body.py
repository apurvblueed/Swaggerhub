# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.add_notification_notification_data import AddNotificationNotificationData  # noqa: F401,E501
from swagger_server import util


class Body(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, notification_body: str=None, notification_id: int=None, notification_data: AddNotificationNotificationData=None, notification_icon: str=None, notification_title: str=None, notification_type: str=None, read_time: int=None, sent_at: int=None, queue_id: int=None):  # noqa: E501
        """Body - a model defined in Swagger

        :param notification_body: The notification_body of this Body.  # noqa: E501
        :type notification_body: str
        :param notification_id: The notification_id of this Body.  # noqa: E501
        :type notification_id: int
        :param notification_data: The notification_data of this Body.  # noqa: E501
        :type notification_data: AddNotificationNotificationData
        :param notification_icon: The notification_icon of this Body.  # noqa: E501
        :type notification_icon: str
        :param notification_title: The notification_title of this Body.  # noqa: E501
        :type notification_title: str
        :param notification_type: The notification_type of this Body.  # noqa: E501
        :type notification_type: str
        :param read_time: The read_time of this Body.  # noqa: E501
        :type read_time: int
        :param sent_at: The sent_at of this Body.  # noqa: E501
        :type sent_at: int
        :param queue_id: The queue_id of this Body.  # noqa: E501
        :type queue_id: int
        """
        self.swagger_types = {
            'notification_body': str,
            'notification_id': int,
            'notification_data': AddNotificationNotificationData,
            'notification_icon': str,
            'notification_title': str,
            'notification_type': str,
            'read_time': int,
            'sent_at': int,
            'queue_id': int
        }

        self.attribute_map = {
            'notification_body': 'Notification_Body',
            'notification_id': 'NotificationID',
            'notification_data': 'Notification_Data',
            'notification_icon': 'Notification_Icon',
            'notification_title': 'Notification_Title',
            'notification_type': 'Notification_Type',
            'read_time': 'Read_Time',
            'sent_at': 'sentAt',
            'queue_id': 'QueueID'
        }
        self._notification_body = notification_body
        self._notification_id = notification_id
        self._notification_data = notification_data
        self._notification_icon = notification_icon
        self._notification_title = notification_title
        self._notification_type = notification_type
        self._read_time = read_time
        self._sent_at = sent_at
        self._queue_id = queue_id

    @classmethod
    def from_dict(cls, dikt) -> 'Body':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body of this Body.  # noqa: E501
        :rtype: Body
        """
        return util.deserialize_model(dikt, cls)

    @property
    def notification_body(self) -> str:
        """Gets the notification_body of this Body.

        Body of the Notification  # noqa: E501

        :return: The notification_body of this Body.
        :rtype: str
        """
        return self._notification_body

    @notification_body.setter
    def notification_body(self, notification_body: str):
        """Sets the notification_body of this Body.

        Body of the Notification  # noqa: E501

        :param notification_body: The notification_body of this Body.
        :type notification_body: str
        """

        self._notification_body = notification_body

    @property
    def notification_id(self) -> int:
        """Gets the notification_id of this Body.

        Unique ID of the notification  # noqa: E501

        :return: The notification_id of this Body.
        :rtype: int
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id: int):
        """Sets the notification_id of this Body.

        Unique ID of the notification  # noqa: E501

        :param notification_id: The notification_id of this Body.
        :type notification_id: int
        """
        if notification_id is None:
            raise ValueError("Invalid value for `notification_id`, must not be `None`")  # noqa: E501

        self._notification_id = notification_id

    @property
    def notification_data(self) -> AddNotificationNotificationData:
        """Gets the notification_data of this Body.


        :return: The notification_data of this Body.
        :rtype: AddNotificationNotificationData
        """
        return self._notification_data

    @notification_data.setter
    def notification_data(self, notification_data: AddNotificationNotificationData):
        """Sets the notification_data of this Body.


        :param notification_data: The notification_data of this Body.
        :type notification_data: AddNotificationNotificationData
        """
        if notification_data is None:
            raise ValueError("Invalid value for `notification_data`, must not be `None`")  # noqa: E501

        self._notification_data = notification_data

    @property
    def notification_icon(self) -> str:
        """Gets the notification_icon of this Body.

        Icon of the notification being sent  # noqa: E501

        :return: The notification_icon of this Body.
        :rtype: str
        """
        return self._notification_icon

    @notification_icon.setter
    def notification_icon(self, notification_icon: str):
        """Sets the notification_icon of this Body.

        Icon of the notification being sent  # noqa: E501

        :param notification_icon: The notification_icon of this Body.
        :type notification_icon: str
        """
        if notification_icon is None:
            raise ValueError("Invalid value for `notification_icon`, must not be `None`")  # noqa: E501

        self._notification_icon = notification_icon

    @property
    def notification_title(self) -> str:
        """Gets the notification_title of this Body.

        Title of the Notification  # noqa: E501

        :return: The notification_title of this Body.
        :rtype: str
        """
        return self._notification_title

    @notification_title.setter
    def notification_title(self, notification_title: str):
        """Sets the notification_title of this Body.

        Title of the Notification  # noqa: E501

        :param notification_title: The notification_title of this Body.
        :type notification_title: str
        """
        if notification_title is None:
            raise ValueError("Invalid value for `notification_title`, must not be `None`")  # noqa: E501

        self._notification_title = notification_title

    @property
    def notification_type(self) -> str:
        """Gets the notification_type of this Body.

        Different kinds of Notifications  # noqa: E501

        :return: The notification_type of this Body.
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type: str):
        """Sets the notification_type of this Body.

        Different kinds of Notifications  # noqa: E501

        :param notification_type: The notification_type of this Body.
        :type notification_type: str
        """
        if notification_type is None:
            raise ValueError("Invalid value for `notification_type`, must not be `None`")  # noqa: E501

        self._notification_type = notification_type

    @property
    def read_time(self) -> int:
        """Gets the read_time of this Body.

        The time at which the Notification is read  # noqa: E501

        :return: The read_time of this Body.
        :rtype: int
        """
        return self._read_time

    @read_time.setter
    def read_time(self, read_time: int):
        """Sets the read_time of this Body.

        The time at which the Notification is read  # noqa: E501

        :param read_time: The read_time of this Body.
        :type read_time: int
        """
        if read_time is None:
            raise ValueError("Invalid value for `read_time`, must not be `None`")  # noqa: E501

        self._read_time = read_time

    @property
    def sent_at(self) -> int:
        """Gets the sent_at of this Body.

        The time at which the Notification is sent.  # noqa: E501

        :return: The sent_at of this Body.
        :rtype: int
        """
        return self._sent_at

    @sent_at.setter
    def sent_at(self, sent_at: int):
        """Sets the sent_at of this Body.

        The time at which the Notification is sent.  # noqa: E501

        :param sent_at: The sent_at of this Body.
        :type sent_at: int
        """
        if sent_at is None:
            raise ValueError("Invalid value for `sent_at`, must not be `None`")  # noqa: E501

        self._sent_at = sent_at

    @property
    def queue_id(self) -> int:
        """Gets the queue_id of this Body.

        QueueID attained after registering through resgister event.  # noqa: E501

        :return: The queue_id of this Body.
        :rtype: int
        """
        return self._queue_id

    @queue_id.setter
    def queue_id(self, queue_id: int):
        """Sets the queue_id of this Body.

        QueueID attained after registering through resgister event.  # noqa: E501

        :param queue_id: The queue_id of this Body.
        :type queue_id: int
        """
        if queue_id is None:
            raise ValueError("Invalid value for `queue_id`, must not be `None`")  # noqa: E501

        self._queue_id = queue_id
