# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Body(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, queue_id: str=None, last_event_id: float=None):  # noqa: E501
        """Body - a model defined in Swagger

        :param queue_id: The queue_id of this Body.  # noqa: E501
        :type queue_id: str
        :param last_event_id: The last_event_id of this Body.  # noqa: E501
        :type last_event_id: float
        """
        self.swagger_types = {
            'queue_id': str,
            'last_event_id': float
        }

        self.attribute_map = {
            'queue_id': 'queue_id',
            'last_event_id': 'last_event_id'
        }
        self._queue_id = queue_id
        self._last_event_id = last_event_id

    @classmethod
    def from_dict(cls, dikt) -> 'Body':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body of this Body.  # noqa: E501
        :rtype: Body
        """
        return util.deserialize_model(dikt, cls)

    @property
    def queue_id(self) -> str:
        """Gets the queue_id of this Body.

        Unique QueueID of a particular user who has registered  # noqa: E501

        :return: The queue_id of this Body.
        :rtype: str
        """
        return self._queue_id

    @queue_id.setter
    def queue_id(self, queue_id: str):
        """Sets the queue_id of this Body.

        Unique QueueID of a particular user who has registered  # noqa: E501

        :param queue_id: The queue_id of this Body.
        :type queue_id: str
        """
        if queue_id is None:
            raise ValueError("Invalid value for `queue_id`, must not be `None`")  # noqa: E501

        self._queue_id = queue_id

    @property
    def last_event_id(self) -> float:
        """Gets the last_event_id of this Body.

        Last event id being acknowledged  # noqa: E501

        :return: The last_event_id of this Body.
        :rtype: float
        """
        return self._last_event_id

    @last_event_id.setter
    def last_event_id(self, last_event_id: float):
        """Sets the last_event_id of this Body.

        Last event id being acknowledged  # noqa: E501

        :param last_event_id: The last_event_id of this Body.
        :type last_event_id: float
        """
        if last_event_id is None:
            raise ValueError("Invalid value for `last_event_id`, must not be `None`")  # noqa: E501

        self._last_event_id = last_event_id
