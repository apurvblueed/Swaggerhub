openapi: 3.0.0
info:
  title: Sandbox Chat Service API
  description: Documentation of Chat Service API
  version: 1.0.0
servers:
- url: https://mockteststart.getsandbox.com/Json
paths:
  /getEvent:
    post:
      summary: Long Polling Data response after a fixed time
      operationId: get_event_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body'
        required: true
      responses:
        200:
          description: Either a new Notification or same.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200'
      security:
      - Acctoken: []
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /register:
    post:
      summary: Register using EventID if present.
      operationId: register_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_1'
        required: true
      responses:
        200:
          description: Return required EventID and QueueID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_1'
      security:
      - Acctoken: []
      x-openapi-router-controller: swagger_server.controllers.default_controller
  /addNotification:
    post:
      summary: Add new Notification
      operationId: add_notification_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/body_2'
        required: true
      responses:
        200:
          description: Successful Response upon adding new notification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/inline_response_200_2'
      security:
      - Acctoken: []
      x-openapi-router-controller: swagger_server.controllers.default_controller
components:
  schemas:
    inline_response_200_events:
      type: object
      properties:
        Notifications:
          type: object
          description: Success or Failure Message
      example:
        Notifications: {}
    body_1:
      required:
      - event_types
      type: object
      properties:
        event_types:
          type: array
          description: type of event
          items:
            type: string
            example: notifications
    body_2:
      required:
      - BookingID
      - BookingName
      - Notifcation_Body
      - NotificationID
      - Notification_Data
      - Notification_Icon
      - Notification_Title
      - Notification_Type
      - QueueID
      - Read_Time
      - sentAt
      type: object
      properties:
        Notification_Body:
          type: string
          description: Body of the Notification
        NotificationID:
          type: integer
          description: Unique ID of the notification
          format: int32
        Notification_Data:
          $ref: '#/components/schemas/addNotification_Notification_Data'
        Notification_Icon:
          type: string
          description: Icon of the notification being sent
        Notification_Title:
          type: string
          description: Title of the Notification
        Notification_Type:
          type: string
          description: Different kinds of Notifications
        Read_Time:
          type: integer
          description: The time at which the Notification is read
          format: int32
        sentAt:
          type: integer
          description: The time at which the Notification is sent.
          format: int32
        QueueID:
          type: string
          description: QueueID attained after registering through resgister event.
    addNotification_Notification_Data:
      type: object
      properties:
        BookingID:
          type: integer
          description: Unique Booking ID of a customer
          format: int32
        BookingName:
          type: string
          description: The kind of booking being executed
    inline_response_200_1:
      type: object
      properties:
        result:
          type: string
          description: Success or Failure Message
        last_event_id:
          type: number
          description: Unique ID of a particular Event being accessed
          example: -1
        queue_id:
          type: string
          description: Unique ID of queue inline of the Event being accessed.
          example: "645725660"
      example:
        result: result
        last_event_id: -1
        queue_id: "645725660"
    inline_response_200:
      type: object
      properties:
        events:
          $ref: '#/components/schemas/inline_response_200_events'
        result:
          type: string
          description: If the call was success or not
      example:
        result: result
        events:
          Notifications: {}
    inline_response_200_2:
      type: object
      properties:
        Code:
          type: integer
          description: Message Success/failure Code
          format: int32
        Message:
          type: string
          description: Describing the Success or Failure of Code
      example:
        Message: Message
        Code: 0
    body:
      required:
      - last_event_id
      - queue_id
      type: object
      properties:
        queue_id:
          type: string
          description: Unique QueueID of a particular user who has registered
          example: "645725660"
        last_event_id:
          type: integer
          description: Last event id being acknowledged
          format: int32
          example: 5
  securitySchemes:
    AccToken:
      type: apiKey
      description: AccessToken for authorization
      name: AccessToken
      in: header
      x-apikeyInfoFunc: swagger_server.controllers.authorization_controller.check_AccToken

